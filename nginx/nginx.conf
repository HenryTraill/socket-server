worker_processes 1;

user nobody nogroup;
# 'user nobody nobody;' for systems with 'nobody' as a group instead
pid /tmp/nginx.pid;
error_log /dev/stdout;

events {
  worker_connections 1024; # increase if you have lots of clients
  accept_mutex off; # set to 'on' if nginx worker_processes > 1
  # 'use epoll;' to enable for Linux 2.6+
  # 'use kqueue;' to enable for FreeBSD, OSX
}

http {
  include mime.types;
  # fallback in case we can't determine a type
  default_type application/octet-stream;
  access_log /dev/stdout combined;
  sendfile on;

  upstream app_server {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response
    # for a TCP configuration
    server web:8000 fail_timeout=0;
  }

  server {
    # if no Host match, close the connection
    listen 443 ssl http2 default_server;

    ssl on;
    ssl_certificate /ssl/cert.pem;
    ssl_certificate_key /ssl/cert.key;

    return 444;
  }

  server {
    listen 443 ssl http2;
    server_name socket.tutorcruncher.com;

    ssl on;
    ssl_certificate /ssl/cert.pem;
    ssl_certificate_key /ssl/cert.key;

    client_max_body_size 4G;

    keepalive_timeout 5;

    location /media {
      alias /media;
    }

    location / {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      # enable this if and only if you use HTTPS
      # proxy_set_header X-Forwarded-Proto https;
      proxy_set_header Host $http_host;

      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;
      proxy_pass http://app_server;
    }
  }
}
